name: Build Native Image

on:
  push:
    branches:
      - main

jobs:
  build-native:
    name: Build Native Image (${{ matrix.arch }})
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            runner: ubuntu-24.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 25
        uses: actions/setup-java@v4
        with:
          java-version: '25'
          distribution: 'temurin'
          cache: 'maven'

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with AOT
        run: mvn clean package

      - name: Build native container image (${{ matrix.arch }})
        run: |
          mvn spring-boot:build-image -Pnative \
            -Dspring-boot.build-image.imageName=spring.aot.demo:0.0.1-SNAPSHOT-${{ matrix.arch }} \
            -Dspring-boot.build-image.imagePlatform=${{ matrix.platform }}

      - name: Save image metadata
        run: |
          docker images spring.aot.demo
          docker inspect spring.aot.demo:0.0.1-SNAPSHOT-${{ matrix.arch }} > image-metadata-${{ matrix.arch }}.json

      - name: Upload image metadata
        uses: actions/upload-artifact@v4
        with:
          name: image-metadata-${{ matrix.arch }}
          path: image-metadata-${{ matrix.arch }}.json
          retention-days: 30

      - name: Test native image
        if: matrix.arch == 'amd64'
        run: |
          # Start the container in background
          docker run -d --name spring-aot-demo -p 8080:8080 spring.aot.demo:0.0.1-SNAPSHOT-${{ matrix.arch }}

          # Wait for application to start (max 30 seconds)
          timeout=30
          while [ $timeout -gt 0 ]; do
            if docker logs spring-aot-demo 2>&1 | grep -q "Started SpringAotDemoApplication"; then
              echo "Application started successfully"
              break
            fi
            echo "Waiting for application to start... ($timeout seconds remaining)"
            sleep 2
            timeout=$((timeout - 2))
          done

          # Test health endpoint
          sleep 5
          curl -f http://localhost:8080/actuator/health || exit 1

          # Test products endpoint
          curl -f http://localhost:8080/api/products || exit 1

          # Stop container
          docker stop spring-aot-demo
          docker rm spring-aot-demo

      - name: Tag and push image to GHCR
        run: |
          # Tag architecture-specific image
          docker tag spring.aot.demo:0.0.1-SNAPSHOT-${{ matrix.arch }} ghcr.io/${{ github.repository_owner }}/spring-aot-demo:0.0.1-SNAPSHOT-${{ matrix.arch }}

          # Push architecture-specific image
          docker push ghcr.io/${{ github.repository_owner }}/spring-aot-demo:0.0.1-SNAPSHOT-${{ matrix.arch }}

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.arch }}
          path: target/*.log
          retention-days: 7
          if-no-files-found: ignore

  create-manifest:
    name: Create Multi-Arch Manifest
    needs: build-native
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifests
        run: |
          # Create and push multi-arch manifest for version tag
          docker manifest create ghcr.io/${{ github.repository_owner }}/spring-aot-demo:0.0.1-SNAPSHOT \
            ghcr.io/${{ github.repository_owner }}/spring-aot-demo:0.0.1-SNAPSHOT-amd64 \
            ghcr.io/${{ github.repository_owner }}/spring-aot-demo:0.0.1-SNAPSHOT-arm64

          docker manifest push ghcr.io/${{ github.repository_owner }}/spring-aot-demo:0.0.1-SNAPSHOT

          # Create and push multi-arch manifest for latest tag
          docker manifest create ghcr.io/${{ github.repository_owner }}/spring-aot-demo:latest \
            ghcr.io/${{ github.repository_owner }}/spring-aot-demo:0.0.1-SNAPSHOT-amd64 \
            ghcr.io/${{ github.repository_owner }}/spring-aot-demo:0.0.1-SNAPSHOT-arm64

          docker manifest push ghcr.io/${{ github.repository_owner }}/spring-aot-demo:latest